Ver también lo que empezamos a hacer para Catalis: http://dpaste.com/hold/67286/


Reorganización de opacmarc-admin:

    - contiene:
        common  => aux ?   *tab, *.fst, *.stw, *.pft, country.*, dictgiz.*, lang.*  
        
        
admin
    conf (podria juntarse con cgi-bin/opac/config/)
        conf.sh
        opac.conf
    bin
        update-opac.*
    data
        lang.txt
        oem2ansi (gizmo)
        shared (common): *.tab, *.fst, *.stw, *.pft, country.*, dictgiz.*, lang.*
        opac.cip.dist (plantilla), opac.cip (se genera automáticamente en base a la plantilla)
    code
        *.pft
        *.fst
        *.proc
    work
        one subdir per database, with subdirectories: original (source), tmp, pre

bases
    common <= lo mismo que admin/common (unificar)
    opac
        un subdir por base de datos

cgi-bin
    common
    opac

htdocs
    common
    opac

logs

bin
    agrep.exe (en Windows)
    newdb.py
    
config
    Aquí podemos juntar lo que está en cgi-bin/opac/config/*.conf y en admin/*.conf
    Pero antes tenemos que verificar que desde wxis podemos leer este dir, e.g.:
        cat(getenv('PATH_WXIS'),'../config/opacmarc.conf')
        
---------------------------------------------------------------

2008-10-08

Cómo organizar archivos usados para tareas de administración.

Tenemos por el momento tres tareas definidas, y cada una de ellas requiere
de un conjunto de archivos auxiliares, además del respectivo archivo .py:

    - install / init
        archivos .id para generar bases isis auxiliares
        templates para config
        
        base demo: .id e imágenes
    
    - add_db
        templates para la nueva base: html, css, conf
    
    - update_db
        pft, fst (lo de admin/opac/)
        más otros archivos comunes (lo de bases/common/)
    

La propuesta es que por cada tarea tengamos un directorio dentro de bin/
y guardemos en él los archivos específicos requeridos por esa tarea (posiblemente
clasificados dentro de subcarpetas más específicas), sin importar qué tipo de
archivos sean, a excepción de archivos de configuración que necesariamente
irán a parar a local-data/config/. Ejemplo:

    bin/
        add_db/
            templates/
                *.htm, *.css, *.conf
        
        update_db/
            *.pft, *.fst
        
        install/
            data/
                *.id + demo img
            templates/
                *.conf
         
¿Dónde ponemos los scripts respectivos? install.py, add_db.py, update_db.py, ...

¿Dónde ponemos archivos comunes a más de una tarea?

¿Dónde ponemos archivos compartidos por alguna tarea y por cgi-bin?

Si alguna de estas tareas requiere parámetros de configuración (archivos .conf o .cipar),
éstos se guardarán en local-data/config/, y sus respectivos templates (sólo usados por
install.py) en...? O bien podríamos consolidar en un único archivo de configuración local
los parámetros de todas las tareas, agrupados por bloques. O bien para no sobrecargar
al opac.xis, podemos usar un .conf para cgi-bin (el opac propiamente dicho), y un .conf
para bin (las tareas de admin).


Los archivos .id en install/data corresponden a bases isis que irán en su mayoría a util/
y por lo tanto podríamos tener esos .id en util/ desde el comienzo. Los otros van a
bin/update_db/.

2008-10-15.
Luego de unos días trabajando con esta disposición de archivos, creo que:

- En los casos de add_db y update_db, parece bien que los archivos asociados queden
  dentro de bin (no parece haber otro lugar más apropiado); sin embargo en el caso de install
  (que contiene data y templates), creo que será mejor dejar los .id en el lugar donde irán
  las bases isis asociadas, y los templates de config en la carpeta config.
  
- En cuanto a los archivos compartidos por bin/update_db y cgi-bin:
      - country
      - dictgiz
      - actab
      - uctab
      - biblio.fst
      - biblio.stw
      - headsort.pft
  creo que sería bueno ubicarlos en bin/update_db, y que desde el cgi-bin se haga referencia a
  ellos, como para dejar en claro que en estos aspectos el funcionamiento del OPAC está
  atado a la manera en que se generaron las bases durante la actualización. (Sí, es una
  justificación extraña, pero por ahora me sirve.)
  
  De esta manera, podríamos deshacernos de la carpeta util.
  
  Dentro de bin/update_db podemos organizar mejor así?
      - pft
      - auxdb
      - tab, fst, stw
  
  Sin embargo, me sigue pareciendo que archivos de uso claramente general, como las tablas
  (actab, uctab), biblio.fst, tal vez deberían ubicarse en un nivel bien general dentro de
  la estructura de carpetas, por si más adelante las queremos usar desde otro script.



---------------------------------------------------------------
Archivos temporales en OpacMarc


Cuándo crea wxis archivos temporales:

    - al hacer una búsqueda (seguro siempre?)
    - cada vez que usamos <file action="create" type="tempfile">
    
El parámetro CI_TEMPDIR se especifica en el cipar, y le indica a wxis en qué directorio
crear los temporales.

Sin embargo, parece que en Linux ignora ese parámetro, y siempre los crea en /tmp.

Por lo tanto, la solución más simple es que en Linux usemos un prefijo PATH_TEMP vacío, o bien
con valor "/tmp".

Para ver en qué partes de la aplicación aparecen archivos temporales, buscamos estas cadenas:

    - tempfile
    - PATH_TEMP
    - v6003^t
    - CI_TEMPDIR
    - 2099
    
---------------------------------------------------------------
2008-10-15

En local-data tenemos una carpeta bases, con una subcarpeta por cada base
alojada en el OPAC. Hay una pequeña incomodidad en el hecho de que el nombre
'bases' puede hacer pensar que allí sólo encontraremos bases de datos, cuando
en realidad hay archivos diversos (conf, css, html, además de las bases en
sí). Las bases propiamente dichas viven dentro de la subcarpeta db.

Tal vez sería más claro si en lugar de 'bases' usáramos el nombre 'catalogs'.
De hecho, en una instalación de OpacMarc, cada base bibliográfica da lugar a
un catálogo aparte, y por el momento no hay conexión entre ellos (salvo por
un link como en el caso de los dos catálogos de ABR).

Así que podríamos tener esto:

    local-data/
        bin/
        catalogs/
            demo/
                cgi-bin/
                    htmlpft/
                    pft/
                config/
                    db-settings o catalog-settings?
                db/ o bases/
                htdocs/
            bibima/
                cgi-bin/
                    htmlpft/
                    pft/
                config/
                db/ o bases/
                htdocs/
        config/
        htdocs/
        logs/
        temp/

Nótese que hemos agregado también, por consistencia, una carpeta cgi-bin para
cada catálogo.

Aun habría que pensar en posibles mecanismos para usar elementos locales de
cgi-bin: un xis, un pft, o un htmlpft (además de los htmlpft ya previstos),
ya sea de nivel local general, o específico para un catálogo.

----------------------------------------------
2008-10-15

Si se usa un virtual host de Apache, podemos enviar los logs de Apache
(asociados a este virtual host) a la carpeta local-data/logs.
Ver http://httpd.apache.org/docs/2.2/logs.html
    http://httpd.apache.org/docs/2.2/mod/mod_log_config.html
Tener en cuenta diferentes versiones de Apache.
Directivas: ErrorLog, TransferLog, CustomLog, LogFormat

---------------------

Renombrar cgi-bin/html => cgi-bin/htmlpft? Para mantener consistencia con local-data.

